uint16_t IRAM_ATTR touch_get_data(uint8_t type)
{
	esp_err_t ret;
	spi_nodma_transaction_t t;
	memset(&t, 0, sizeof(t));            //Zero out the transaction
	uint8_t rxdata[2] = {0};

	if (spi_nodma_device_select(ts_spi, 0)) return 0;

	// send command byte & receive 2 byte response
    t.rxlength=8*2;
    t.rx_buffer=&rxdata;
	t.command = type;

	ret = spi_nodma_transfer_data(ts_spi, &t);    // Transmit using direct mode

	spi_nodma_device_deselect(ts_spi);

	if (ret) return 0;

	return (((uint16_t)(rxdata[0] << 8) | (uint16_t)(rxdata[1])) >> 4);
}



// ============= Touch panel functions =========================================

//-----------------------------------------------
static int tp_get_data(uint8_t type, int samples)
{
	int n, result, val = 0;
	uint32_t i = 0;
	uint32_t vbuf[18];
	uint32_t minval, maxval, dif;

    if (samples < 3) samples = 1;
    if (samples > 18) samples = 18;

    // one dummy read
    result = touch_get_data(type);

    // read data
	while (i < 10) {
    	minval = 5000;
    	maxval = 0;
		// get values
		for (n=0;n<samples;n++) {
		    result = touch_get_data(type);
			if (result < 0) break;

			vbuf[n] = result;
			if (result < minval) minval = result;
			if (result > maxval) maxval = result;
		}
		if (result < 0) break;
		dif = maxval - minval;
		if (dif < 40) break;
		i++;
    }
	if (result < 0) return -1;

	if (samples > 2) {
		// remove one min value
		for (n = 0; n < samples; n++) {
			if (vbuf[n] == minval) {
				vbuf[n] = 5000;
				break;
			}
		}
		// remove one max value
		for (n = 0; n < samples; n++) {
			if (vbuf[n] == maxval) {
				vbuf[n] = 5000;
				break;
			}
		}
		for (n = 0; n < samples; n++) {
			if (vbuf[n] < 5000) val += vbuf[n];
		}
		val /= (samples-2);
	}
	else val = vbuf[0];

    return val;
}

//=============================================
bool tft_read_touch(int *x, int* y, uint8_t raw)
{
	int result = -1;
    int32_t X=0, Y=0, tmp;

    *x = 0;
    *y = 0;

    result = tp_get_data(0xB0, 3);
	if (result > 50)  {
		// tp pressed
		result = tp_get_data(0xD0, 10);
		if (result >= 0) {
			X = result;

			result = tp_get_data(0x90, 10);
			if (result >= 0) Y = result;
		}
	}

	if (result <= 50) return false;

	if (raw) {
		*x = X;
		*y = Y;
		return true;
	}

	int xleft   = (tp_calx >> 16) & 0x3FFF;
	int xright  = tp_calx & 0x3FFF;
	int ytop    = (tp_caly >> 16) & 0x3FFF;
	int ybottom = tp_caly & 0x3FFF;

	int width = ILI9341_WIDTH;
	int height = ILI9341_HEIGHT;
	if (tft_disp_type == DISP_TYPE_ILI9488) {
		width = ILI9488_WIDTH;
		height = ILI9488_HEIGHT;
	}

	if (((xright - xleft) != 0) && ((ybottom - ytop) != 0)) {
		X = ((X - xleft) * height) / (xright - xleft);
		Y = ((Y - ytop) * width) / (ybottom - ytop);
	}
	else return 0;

	if (X < 0) X = 0;
	if (X > height-1) X = height-1;
	if (Y < 0) Y = 0;
	if (Y > width-1) Y = width-1;

	switch (orientation) {
		case PORTRAIT:
			tmp = X;
			X = width - Y - 1;
			Y = tmp;
			break;
		case PORTRAIT_FLIP:
			tmp = X;
			X = Y;
			Y = height - tmp - 1;
			break;
		case LANDSCAPE_FLIP:
			X = height - X - 1;
			Y = width - Y - 1;
			break;
	}

	*x = X;
	*y = Y;
	return true;
}



#if USE_TOUCH
		if ( tft_read_touch(&tx, &ty, 1)) {
			printf(" Touched at (%d,%d) [row TS values]\r\n",tx,ty);
		}
#endif



#if USE_TOUCH
			// Get touch status
			_fg = TFT_YELLOW;
			TFT_setFont(DEFAULT_FONT, NULL);
			if ( tft_read_touch(&tx, &ty, 0)) {
				// Touched
				sprintf(buffer, "TOUCH at %d,%d", tx,ty);
				_fg = TFT_YELLOW;
				TFT_setFont(DEFAULT_FONT, NULL);
				TFT_print(buffer, CENTER, 58);
			}
			else TFT_fillRect(50, 58, _width-50, tft_getfontheight(), TFT_BLACK);
#endif


#if USE_TOUCH
	spi_nodma_device_interface_config_t tsdevcfg={
        .clock_speed_hz=2500000,                //Clock out at 2.5 MHz
        .mode=0,                                //SPI mode 2
        .spics_io_num=PIN_NUM_TCS,              //Touch CS pin
		.spics_ext_io_num=-1,                   //Not using the external CS
		.command_bits=8,                        //1 byte command
		.queue_size = 1,
    };
#endif