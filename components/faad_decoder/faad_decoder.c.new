/*
 * fdk_aac_decoder.c
 *
 *  Created on: 08.05.2017
 *      Author: michaelboeckling
 */

#include <stdbool.h>
#include <inttypes.h>
#include <string.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_log.h"
#include "driver/i2s.h"

#include "common_buffer.h"
//#include "aacdecoder_lib.h"
#include "audio_player.h"
//#include "m4a.h"
#include "spiram_fifo.h"
#include "neaacdec.h"

#define TAG "neaac_decoder"


/* small, its just a transfer bucket for the internal decoder buffer */
static const uint32_t INPUT_BUFFER_SIZE = 1024;

#define MAX_CHANNELS        2
#define MAX_FRAME_SIZE      2048
#define OUTPUT_BUFFER_SIZE  2048


void faad_decoder_task(void *pvParameters)
{
    // ESP_LOGI(TAG, "(line %u) free heap: %u", __LINE__, esp_get_free_heap_size());

    player_t *player = pvParameters;
    //AAC_DECODER_ERROR err;

    /* allocate sample buffer */
    buffer_t *pcm_buf = buf_create(OUTPUT_BUFFER_SIZE);

    /* allocate bitstream buffer */
    buffer_t *in_buf = buf_create(INPUT_BUFFER_SIZE);
    fill_read_buffer(in_buf);

	
unsigned long cap = NeAACDecGetCapabilities();
printf("CAP: %d\n",cap);
// Check if decoder has the needed capabilities
// Open the library
NeAACDecHandle hAac = NeAACDecOpen();
// Get the current config
NeAACDecConfigurationPtr conf = NeAACDecGetCurrentConfiguration(hAac);	
	
	
	
    //HANDLE_AACDECODER handle = NULL;
    pcm_format_t pcm_format = {.buffer_format = PCM_INTERLEAVED};

    /* select bitstream format */
    
    const uint32_t flags = 0;
    uint32_t pcm_size = 0;
    bool first_frame = true;

    ESP_LOGI(TAG, "(line %u) free heap: %u", __LINE__, esp_get_free_heap_size());

    while (!player->media_stream->eof) {

        /* re-fill buffer if necessary */
        if (buf_data_unread(in_buf) == 0) {
            fill_read_buffer(in_buf);
        }
goto cleanup;
        // bytes_avail will be updated and indicate "how much data is left"
        size_t bytes_avail = buf_data_unread(in_buf);
    
        // ESP_LOGI(TAG, "fdk_aac_decoder stack: %d\n", uxTaskGetStackHighWaterMark(NULL));
        // ESP_LOGI(TAG, "%u free heap %u", __LINE__, esp_get_free_heap_size());

        // about 32K free heap at this point
    }

    cleanup:

    buf_destroy(in_buf);
    buf_destroy(pcm_buf);

    //aacDecoder_Close(handle);
	
	spiRamFifoReset();

    player->decoder_status = STOPPED;
    player->decoder_command = CMD_NONE;
    printf("MAD: Decoder stopped.\n");

    ESP_LOGI(TAG, "aac decoder finished");

    vTaskDelete(NULL);
}
